**HTML常用标签：
    * <h1></h1>-<h6></h6>
    * <p></p>
    * <a href="">
    * <img src="" alt="">
    * <br/>
    * <b> <big> <em> <i> <small> <strong> <sub>（下标字） <sup>（上标字） <ins>(插入字) <del>(删除字)
    * <abbr>（缩写） <address> <q> <blockquote> <pre>
    * <table> <caption> <th> <tr> <td> <thead> <tbody> <tfoot>
    * <ul> <ol> <li>
    * <div> <span>
    * <form> <input> <select> <textarea> <button>
1.CSS代码风格：
    1）代码书写尽量不要在一行；
    2）代码全部采用小写，不要用大写
    3）属性值前面，冒号后面保留一个空格
    4）在选择器和大括号之间也保留一个空格
    如：h3 {
        color: red
    }

2.CSS基础选择器：
    1）选择器的作用：根据开发中的不同需求将某个需要设置样式的标签选择出来。简单来说，就是选择需要操作的标签
    --选择标签并设置样式；
    2）基础选择器包括：标签选择器、类选择器（.）、多类选择器、id选择器（#）和通配符选择器（*）

3.CSS字体属性总结：
    1）font-size：字号，通常用px作为单位
    2）font-family：字体，开发中通常使用微软雅黑
    3）font-style：字体样式，倾斜是italic，不倾斜是normal，通常使用normal
    4）font-weight：字体粗细，加粗为700或bold；不加粗是normal或400；数字后面没有单位
    5）复合属性：
        font：font-style font-weight font-size/line-height font-family

4.CSS文本属性总结：
    1）color：文本的颜色，颜色的表示方法有三种，通常使用十六进制
    2）text-align：文本水平对齐方式 left/center/right
    3）text-decoration：文本修饰，添加下划线为underlined 取消下划线为none
    4）text-indent：文本缩进，一般用于段落的开头缩进两个字的距离 2em
    5）line-height：设置行高，行高就是当前行文字底部到上一行文字底部的距离

5.CSS引入方式总结：
    1）行内样式表：书写方便，权重高
    2）内部样式表：在head里面的style标签里进行样式书写
    3）外部样式表：新建一个css文件，采用link：css引入

6.chrome调试工具：

7.Emmet语法：
    1）快速生成html结构语法：
    ①生成标签：直接输入标签名按tab即可
    ②生成多个标签：标签名*数量
    ③父子级标签：可以用>号，如ul>li
    ④兄弟级标签：可以用+号，如div+p
    ⑤如果生成带有类名或者id名字的：可以用 .demo 或 #two 然后按tab
    ⑥如果生成的div类名是有顺序的，可以用自增符号$
    ⑦如果想要在生成的标签内部写内容可以用{}
    2）快速生成css样式：
    3）快速格式化代码：

8.CSS的复合选择器：
    复合选择器是建立在基础选择器之上，对基本选择器进行组合而形成的。
    复合选择器通常包括：后代选择器、子选择器、并集选择器和伪类选择器
    1）后代选择器：
        父元素包括子元素，用空格隔开。子元素只要是包含在父元素里面的都可以选择，不管是儿子代还是孙子代。
    2）子元素选择器：
        只能选择某一元素最近一级的子元素，通俗来说就是选择亲儿子元素
        元素1>元素2 {样式}
    3）并集选择器：
        对于不同的标签如果需要设置相同的样式，可采用并集选择器。选择器之间用逗号分隔！
        元素1，元素2，元素3 {属性：属性值；}、
        任何选择器例如类选择器、id选择器都可以作为并集选择器！
    4）伪类选择器：
        伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加效果，或选择第一个、第n个元素
        1.链接伪类选择器:选择不同状态的链接元素
            a:link
            a:visited
            a:hover
            a:active
        注意事项：
            ①按照link visited hover active的顺序进行书写
            ②因为链接a在浏览器中具有默认样式，所以在实际开发中需要给链接单独指定样式
            ③实际开发中一般只要求鼠标经过时显示不同的样式
        2.focus伪类选择器：选取获得焦点的表单元素
            哪个元素获得了光标，就会执行相应的样式

9.CSS的元素显示模式：
    html元素一般分为块元素和行内元素两种
    1）块级元素：h1-h6 / p / div / ul / ol / li
                其中div是最典型的块级元素
       块级元素的特点：
            1）块级元素总是独占一行
            2）height、width、margin和padding都可以控制
            3）宽度默       认是容器（父级元素）的100%
            4）块级元素可以看作一个容器或者一个盒子，里面可以放块级元素或行级元素
       注意：文字类元素内部不允许再放块级元素
    2）行内元素：a / strong / b / em / i / del / s / ins / u / span
                其中span元素是最典型的行内元素
       行内元素的特点：
            1）一行可以显示多个行内元素
            2）宽度和高度的设置是无效的
            3）默认宽度就是元素本身内容的宽度
            4）行内元素里面只能放文本或者其他行内元素
    3）行内块元素：同时具有块级元素和行级元素的特点
            img / input / td /
       行内块元素的特点：
            1）行内块元素可以显示在同一行，但是它们之间会有空白的缝隙。浏览器中一行可显示多个行内块元素
            2）默认宽度就是它本身内容的宽度
            3）高度、行高、外边距和内边距都可以控制
    4）元素显示模式转换：当一个模式的元素需要另一类模式的元素的特点时，就可以采用元素显示模式转换
                        比如要增加<a>的触发范围
            1）display:block;
            2）display:inline;
            3）display:inline-block;

10.CSS的背景
    1）背景颜色：background-color:transparent/color;
    2）背景图片：background-image:url();实际开发中常用于logo或者装饰性的小图片   或者是超大的背景图
    3）背景平铺：backgroung-repeat:repeat | no-repeat | repeat-x | repeat-y;
        默认情况下，背景图片是平铺的；
    4）背景位置（方位名词）：background-position
        background-position:x y;
        x和y可以使用方位名词或精准单位
    5）背景图像固定：background-attachment：scroll/fixed；
        设置背景图像是否跟随滚轮滚动
    6）背景属性的复合写法：没有特定的书写样式，一般习惯为：
        background：color url() repeat scroll position
        background:
    7）背景颜色半透明：（只是让背景颜色半透明）
        background:rgba(0,0,0,0.3)
        最后一个参数为透明度，取值在0-1；前面三位数字为颜色的取值，最后一位若是0，则透明度为百分百，若为1，则不透明

11.CSS三大特性之层叠性：
    如果给相同的选择器设置相同的样式，那么一个属性就会覆盖另一个属性。
    层叠性就是为了解决样式冲突的问题。
    层叠性原则：
    1）样式若产生冲突则采取就近原则，哪个样式离元素近，就采取哪个样式
    2）样式若不冲突，则不会层叠

12.CSS三大特性之继承性：
    子标签会继承父标签的某些样式（并不会继承全部样式），如text-  font-  line-  color

    特殊情况：行高的继承性
    继承的行高如果是像素，则还是继承相应像素。若是相对高度，则继承之后的应是当前行高的相应倍数。

13.CSS三大特性之优先级：
    当同一个元素指定多个选择器，就会有优先级的产生。
    1）若选择器相同，则执行层叠性原则，即就近原则
    2）若选择器不同，则根据选择器的权重来执行
    important(无穷大)>行内样式(1000)>ID选择器(100)>类选择器、伪类选择器(10)>元素选择器(1)>继承或*(0)
    权重虽然会叠加，但是永远不会有进位，真正比较的时候是从左到右依次比较四个位置上的数字大小

    复合选择器的权重会进行累加，如后代选择器，儿子选择器；

14.网页布局的过程：
    1）先准备好相关的网页元素，网页元素基本都是盒子box
    2）利用CSS设置好盒子的样式，然后摆放到相应位置
    3）往盒子里面装内容

15.盒子模型组成部分：
    border  content   padding  margin

16.CSS盒子模型之border:
    1）border:border-width || border-style || border-color
    边框的复合属性：如 border:1px solid red;(三个属性没有顺序)
    边框属性可以分开写，如要设置上边框： border:1px dashed pink;
    下边框：border-bottom   左边框：border-left   右边框：border-right

17.表格细线边框：
    border-collapse：控制浏览器绘制表格边框的方式，它控制相邻单元格的边框。
    border-collapse:collapse;
    collapse是合并的意思，表示将相邻单元格边框合并在一起

18.盒子模型内边距padding：
    padding属性设置内边距，即盒子内容与边框之间的距离
    padding-top  padding-left  padding-right  padding-right
    padding复合属性：
    1）padding:5px;                  一个值，代表上下左右的内边距都是5px
    2）padding:5px 10px;             两个值，代表上下内边距是5px，左右内边距是10px
    3）padding:5px 10px 20px;        三个值，代表上内边距是5px，左右内边距是10px，下内边距是20px
    4）padding:5px 10px 20px 30px;   四个值，代表上内边距是5px，右内边距是10px，下内边距是20px，左内边距是30px；（顺时针）
    padding会撑开盒子的大小，在实际开发中要注意用盒子的宽度或高度减去对应的padding值，不能影响盒子的大小

    padding不会撑开盒子的情况：
    若没有给一个盒子指定宽度和高度，padding值就不会撑开盒子

19.盒子模型外边距margin：
    margin属性用于设置外边距，主要控制盒子与盒子之间的距离
    margin-left  margin-right  margin-top  margin-bottom
    margin的简写方式与padding一致
    1）外边距典型应用：外边距可以让盒子在浏览器中水平居中，但必须满足两个条件
        ①盒子必须指定width
        ②盒子的左右margin设置为auto
    让行内元素或行内块元素水平居中的方法是给其父元素添加text-align:center；即可

20.外边距合并：
    1）当上下相邻的两个块元素相遇时，如果上面的元素有下边距margin-bottom，下面的元素有上边距margin-top，那么它们之间的
    垂直距离不是margin-bottom和margin-top之和，而是两者之间的较大值，这种现象被称为相邻块元素垂直外边距的合并
    解决方案：尽量只给一个盒子添加margin
    2）嵌套块元素的塌陷：
    对于两个嵌套关系（父子关系）的块元素，父元素有上外边距，子元素也有上外边距，此时父元素会塌陷较大的外边距值
    解决方案：
    ①可以为父元素定义上边框
    ②可以为父元素定义上内边距
    ③可以为父元素添加overflow:hidden;

21.清除内外边距：
    很多网页元素都带有默认的内外边距，而且不同浏览器默认的内外边距也不一样，因此，在进行网页布局前，首先要清除网页元素的内外边距
    * {
        padding:0;
        margin:0;
    }
    行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距，但是转换为块级元素就可以了

22.问题总结：
    1）布局为什么要用不同的盒子？只用div来布局可以吗？
        标签都是有语义的，在不同的地方用合理的标签。
    2）为什么用那么多的类名？
        类名就像是给每个盒子起了一个名字，可以更好的找到这个盒子，选取盒子更容易，并且后期维护也更方便
    3）到底用margin还是padding？
    4）自己做没有思路?

    去掉li前面的小圆点: list-style:none;

23.圆角边框（CSS3）
    CSS3中新增了盒子的圆角边框属性，可以使用border-radius属性来使盒子的边框为圆角
    语法格式：border-radius:length;
    原理：用半径为length的圆分别在四个角与矩形盒子相切

    1）如何制作一个圆形的盒子
    2）如何制作一个圆角矩形

    *参数值可以为数值或者百分比的形式
    *如果是正方形，想要设置为一个圆形，把数值修改为高度或宽度的一半或者50%即可
    *如果是个矩形，把数值设置为高度的一半即可
    *该属性是一个简写属性，完整写法可以跟四个值，分别代表左上角，右上角，右下角，左下角（顺时针）
    如果跟两个数值，代表了两条对角线上的角的角度
    *也可以分开写：
    border-top-left-radius  border-top-right-radius  border-bottom-right-radius  border-bottom-left-radius
    (每个属性的单词书写顺序不能颠倒)

24.盒子阴影（CSS3）
    CSS3中新增了盒子阴影，可以使用box-shadow属性为盒子添加阴影
    语法格式：
    box-shadow:h-shadow v-shadow blur spread color inset;
    * h-shadow:必须有，水平阴影的位置，允许为负值
    * v-shadow:必须有，垂直阴影的位置，允许为负值
    * blur:可选，模糊距离,数值越大影子越模糊
    * spread:可选，阴影尺寸，数值越大，阴影越大
    * color:可选，阴影的颜色
    * inset:可选，将外部阴影（outset）改为内部阴影
    注意：
    1）默认的是外阴影outset，可以通过inset修改为内阴影，但是不可以写outset，否则会导致阴影无效
    2）盒子阴影不会占用空间，不会影响其他盒子的排列

25.文字阴影（CSS3）
    在CSS3中，可以使用text-shadow属性将阴影应用于文本。
    语法格式:
    text-shadow:h-shadow v-shadow blur color;

浮动：
26.CSS浮动
    1）传统网页布局的三种方式？
        标准流（普通流/文档流）：标签按照默认方式排列
            *块级元素会独占一行，从上向下排列
            *行级元素会按照顺序，从左到右进行排列，占满一行则自动换行
            标准流是最基本的布局方式
        浮动：
        定位：
    2）为什么需要浮动？
        有很多的布局效果，标准流布局方式很难去完成实现，此时就可以利用浮动进行布局，因为浮动会改变标签默认的排序方式
        浮动最典型的应用就是可以让多个块级元素在同一行进行排列
        **网页布局第一准则**
        多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动
    3）什么是浮动？
        float属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。
        语法规则：
        选择器{float:属性值}；  left right none
    4）浮动的特性：加了浮动的元素之后会具有很多特性
        1.浮动元素会脱离标准流（脱标）
        2.浮动的元素会在一行内显示，并且元素顶部对齐
        3.浮动的元素会具有行内块元素的特性

27.浮动特性一----脱标
    设置了浮动的元素最重要的特性：
    1）脱离了标准普通流的控制，从而移动到指定位置，俗称脱标
    2）浮动的盒子不再保留原先的位置

28.浮动特性二----浮动元素一行显示
    如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列
    注意：浮动的元素是互相紧靠在一起的（不会有缝隙），如果父级宽度装不下这些盒子，那么就会另起一行继续对齐排列

29.浮动特性三----浮动元素具有行内块特性
    任何元素都可以设置浮动，不管原来是块级元素还是行级元素，只要加了浮动就会具有行内块元素相似的特性
    如果行内元素有了浮动之后，就不用再进行模式转换，可以直接给其设定宽度和高度
    *如果块级盒子没有设置宽度，默认宽度和父级盒子宽度一样宽，那么在添加浮动后，它的大小由盒子内部的内容来决定
    *浮动的盒子中间是没有缝隙的，紧密连接
    *行内元素同理

30.浮动元素经常搭配标准流的父元素
    为了约束浮动元素的位置，网页布局时一般采用的策略是：
    先用标准流的父级元素排列好上下位置，之后内部的子元素采取浮动排列左右位置，符合网页布局第一准则
    **网页布局第二准则**
    先设置盒子的大小，再设置盒子的位置

31.浮动的两个注意点
    1）浮动和标准流的父盒子搭配
        先用标准流的父盒子排列上下位置，之后内部子元素采取浮动方式左右排列
    2）一个元素浮动了，理论上其余的兄弟元素都要浮动
        一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟盒子也应该浮动，以防止引起问题
        浮动的盒子只会影响该浮动盒子后面的标准流，不会影响其前面的标准流

32.为什么要清除浮动？
    前面浮动元素经常放在一个标准流的父盒子里面，并且为父盒子都预先设定了高度。
    但是，所有的父盒子都必须要设置高度吗？
    理想的状态是，让子盒子去撑开父盒子，即有多少子盒子，父盒子就有多高

    由于父盒子在很多情况下，不方便给高度，因为盒子里的内容可能会增多或减少。
    但是子盒子若要在父盒子里面依次排列就需要设置浮动，一旦浮动就不会在父盒子里面占有高度，
    最后父盒子的高度为0时，就会影响下面的标准流盒子。
    由于浮动流元素不占用原文档流的位置，所以会对后面的元素排版产生影响。

33.清除浮动本质以及额外标签法
    清除浮动的本质就是清除浮动元素造成的影响；
    如果父级盒子有高度，就不用清除浮动
    清除浮动之后，父级盒子就会根据浮动的子盒子自动检测高度，就不会影响后面的标准流了
    语法--选择器 {clear:属性值} left/right/both
    在实际工作中，几乎只用clear：both；

    清除浮动的策略是：闭合浮动。

34.清除浮动的方法：
    1）额外标签法（隔墙法），是W3C推荐的做法；
        额外标签法会在浮动元素的末尾添加一个空的标签，例如<div style="clear:both"></div>，
        或者其他标签如<br/>等
        优点：通俗易懂，书写方便
        缺点：添加许多无意义的标签，结构性较差
        注意：新添加的闭合标签必须是块级元素
    2）父级元素添加overflow
        为父级元素添加overflow属性，将其属性值设置为hidden，auto或scroll
        优点：代码简洁
        缺点：无法显示溢出的部分
    3）清除浮动方法三----after伪元素

    4）清除浮动方法四----双伪元素清除浮动


35.常见的图片格式
    1）jpg图像格式：JPEG（JPG）对色彩的信息保留较好，高清，颜色较多，产品类的图片经常用jpg格式
    2）gif动画格式：GIF格式最多只能储存256色，所以通常用来显示简单图形或字体，但是可以保存透明背景和动画效果，
        实际经常用于一些图片小动画效果
    3）png图像格式：png格式是一种新兴的网络图像格式，它结合了GIF和JPEG的优点，具有存储形式丰富的特点，能够保持透明背景，
        如果想要切成背景透明的图片，就可以选择png格式
    4）PSD图像格式：PSD格式是PS的专用格式，里面可以存放图层，通道，遮罩等多种设计稿，对前端人员来说，
        最大的优点就是可以直接从上面复制文字，获得图片，还可以测量大小和距离

36.CSS属性书写顺序
    建议遵循以下顺序：
    1）布局定位属性：dislpay/position/float/clear/visibility/overflow（建议display第一个写，因为关系到显示模式）
    2）自身属性：width/height/margin/padding/border/background
    3）文本属性：color/font/text-decoration/text-align/vertical-align/white-space/break-word
    4）其他属性（CSS3）：content/cursor/border-radius/box-shadow/text-shadow/background：liner-gradient...

37.页面布局整体思路
    1）必须确定页面的版心（可视区），测量可知
    2）分析页面中的行模块，以及每个行模块中的列模块，即网页布局第一准则
    3）一行中的列模块经常浮动布局，先确定每列的大小，之后确定列的位置，即网页布局第二准则
    4）制作html结构，遵循先有结构，后有样式的原则，结构永远最重要

定位：
38.为什么需要定位：
    思考一下，以下情形使用标准流或浮动可以实现吗？
    1）某个元素可以自由地在一个盒子内部移动位置，并且压住其他盒子
    2）当在网页中滚动窗口时，盒子是一直固定在某个位置的
    以上效果标准流或浮动都无法快速实现，此时需要定位来实现
    所以；
    1）浮动可以让多个块级盒子在一行内没有缝隙的显示，经常用于横向排列盒子
    2）定位则是可以让某个盒子自由地在某个大盒子内移动位置，或者固定在屏幕中某一个位置，并且可以压住其他盒子

39.定位组成
    定位：将盒子定在某一位置，所以定位也是在摆放盒子，按照定位的方式移动盒子
    定位=定位模式+边偏移
    定位模式用于指定一个元素在文档中的定位方式，边偏移则决定了该元素的最终位置
    1）定位模式：
        决定了元素的定位方式，它是通过CSS的position属性进行设置，其属性值有
        static：静态定位
        relative：相对定位
        absolute：绝对定位
        fixed：固定定位
    2）边偏移：
        边偏移就是定位的盒子移动到最终位置，有top，bottom，left，right四个属性

40.相对定位：
    1）静态定位（static）
        静态定位是元素的默认定位方式，即无定位的意思
        语法格式：   选择器{position：static；}
        静态定位仍然按照标准流特性摆放位置，没有边偏移；
        静态定位在布局中很少使用；
    2）相对定位（relative）
        相对定位是元素在移动时，是相对它原来的位置来说的
        语法格式：   选择器 {position：relative；}
        特点：
            1.相对定位模式是相对于元素原来的位置移动的
            （即移动位置的参照点是自身原来的位置）
            2.原来在标准流中的位置继续占有，后面的盒子仍以标准流的方式对待它
            （即不脱标，保留原来的位置）
            因此，相对定位并没有脱标，它最典型的应用是给绝对定位当爹的。

41.绝对定位（absolute）
    绝对定位是元素在移动位置的时候，是相对于它的祖先元素移动的。
    语法格式：   选择器 {position：absolute；}
    特点：
        1.如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document文档）
        2.如果祖先元素有定位（相对，绝对，固定定位），则以最近一级的有定位祖先元素为参考点移动位置
        3.绝对定位不再占有原来的位置（脱标）

42.子绝父相
    子级元素使用绝对定位，则父级元素需要相对定位
    1）子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子
    2）父盒子一定要加一个定位，才能保证子盒子在父盒子中显示
    3）父盒子布局时需要占有位置，所以只能给父盒子加相对定位

43.固定定位（fixed）：
    固定定位是元素固定于浏览器可视区的位置
    主要使用场景：可以在浏览器页面滚动时元素的位置保持不变
    语法格式：选择器 {position：fixed}
    特点：
    1）以浏览器的可视窗口为参照点移动元素
    **跟父元素没有任何关系
    **不随滚动条滚动
    2）固定定位不再占有原来的位置

    **小技巧：如何让盒子固定在版心右侧位置**
    1）让固定定位的盒子left：50%；走到浏览器可视区域（版心）一半的位置
    2）让固定盒子margin-left：版心宽度一半的距离，即再走版心宽度一半的距离

44.粘性定位（sticky）
    粘性定位可以被认为是相对定位和固定定位的结合
    选择器 {position：sticky；top: 10px;}
    特点：
    1）以浏览器的可视窗口为参照点移动（fixed）
    2）粘性定位占有原来的位置（ralative）
    3）必须添加top、left、right、bottom其中一个才有效
    跟页面滚动搭配使用，兼容性较差，IE不支持

45.定位的叠放次序
    **在使用定位布局时，可能会出现盒子重叠的情况，此时，可以用z-index来控制盒子的前后次序（z轴）
    即确定哪个盒子在上面，哪个盒子在下面
    **语法规范： 选择器 {z-index：1；}
        1）数值可以是正整数，负整数或0，默认值是auto，数值越大越靠上
        2）如果属性值相同，则按照书写顺序，后来者居上
        3）数字后面不能加单位
        4）只有定位的盒子才有z-index属性，其他诸如标准流，浮动的盒子都没有这个属性

46.定位的拓展：
    1）绝对定位的盒子居中：
        加了绝对定位的盒子，不能通过margin：0 auto；来实现水平居中，但是可以通过以下计算方法来实现水平和垂直居中
        1.left走父容器宽度的一半
        2.margin 负值 往左边走盒子的一半距离
        3.top走父容器高度的一半
        4.margin 负值 往上走盒子高度一半的距离

47.定位的特殊特性
    1）行内元素添加绝对定位或固定定位，可以直接设置宽度和高度
    2）块级元素添加绝对定位或固定定位，如果不设置高度或宽度，那么高度或宽度默认就是内容的大小
    3）脱标的盒子不会触发外边距塌陷，浮动元素，绝对定位（固定定位）的元素都不会触发外边距合并的问题
    4）绝对定位（固定定位）会完全压住盒子
        浮动元素只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的图片或文字
        绝对定位或固定定位会压住下面标准流的所有内容
        浮动之所以不会压住文字，因为浮动产生的最初目的就是为了做文字环绕的效果，文字会围绕浮动元素

48.网页布局总结：
    通过盒子模型，清楚知道大部分html标签就是一个盒子
    通过CSS浮动和定位可以让每个盒子排列称为网页
    一个完整的网页，是标准流，浮动和定位一起完成布局的，每个方式都有自己专门的用法
    1.标准流：
    可以让盒子上下排列或左右排列，块级盒子上下排列，行级盒子左右排列。垂直的块级盒子就用标准流布局
    2.浮动：
    可以让多个块级盒子一行显示或者左右对齐盒子，多个块级盒子水平显示就采用浮动布局
    3.定位：
    定位最大的特点就是有层叠的概念，就是可以让多个盒子前后叠压来显示，如果元素自由地在某个盒子内移动就采用定位布局

49.元素的显示与隐藏：
    类似网站广告，当我们点击关闭时就不见了，但是当刷新页面后，会重新出现
    本质：让一个元素在页面中隐藏或者显示出来
    1.display显示隐藏
    display属性用于设置一个元素应该如何显示
    1）display：none；隐藏对象并没有删除,但是不再占有原来的位置，搭配js可以制作很多网页特效
    2）display：block；除了转换为块级元素之外，同时还有显示元素的作用

    2.visibility显示隐藏
    visibility属性用于指定一个元素应该可见还是隐藏
    visibility：visible|hidden；
    visibility隐藏的元素仍然占有原来的位置；（与display：none；最大的区别）
    **如果隐藏元素想要原来的位置，就用visibility：hidden；
    **如果隐藏元素不想要原来的位置，就用display：none；（用处更多）

    3.overflow溢出显示隐藏
    overflow属性指定了如果内容溢出一个元素的框（超过其宽度或高度）时，会发生什么
    overflow：visible（默认）|auto|hidden|scroll
    **scroll：不管内容溢出还是不溢出，都会显示滚动条
    **auto：只有内容溢出才会显示滚动条，内容不溢出不会显示滚动条
    一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局
    但是如果有定位的盒子，要慎用隐藏，因为他会隐藏多余的部分

50.精灵图
    1）为什么需要精灵图？
        一个网页中往往会应用很多小的背景图片作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求图片，
        造成服务器压力过大，这将会大大降低页面的加载速度
        因此，为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也叫CSS Sprites、CSS雪碧）
        **核心原理：将网页中一些小背景图像整合到一张大图中，这样服务器只要一次请求就可以了
    2）精灵图的使用：
        1.精灵技术主要针对背景图片使用，就是把多个小背景图片整合到一张大图片中。
        2.这个大图片也称为sprites精灵图或者雪碧图。
        3.移动背景图片位置，此时可以使用background-position。
        4.移动的距离就是这个目标图片的x坐标和y坐标，注意网页中坐标有所不同
        5.因为一般情况下都是往上往左移动，所以数值是负值
        6.使用精灵图的时候需要精确测量，每个小背景图片的大小和位置

51.字体图标：
    字体图标使用场景：主要用于显示网页中通用、常用的一些小图标
    精灵图是有诸多优点的，但是缺点还是很明显，如：
    1.精灵图图片文件本身还是较大
    2.精灵图本身放大和缩小会失真
    3.一旦精灵图图片制作完毕想要更换就会非常复杂
    此时，字体图标iconfont很好的解决了上面的问题
    **字体图标展示的虽然是图标，但是本质上还是字体
    字体图标的优点：
    1）轻量级：一个图标字体要比一系列的图像要小，一旦字体加载了，图标就会马上渲染出来，减少了服务器请求；
    2）灵活性：本质上还是文字，可以很方便的更改颜色，设置阴影，透明效果，旋转等文字特效；
    3）兼容性：几乎支持所有浏览器，可以放心使用；
    注意：字体图标不能完全替换精灵图技术，只是对实际开发中图标部分技术的提升和优化
    总结：
    1）如果遇到一些结构或样式比较简单的小图标，就可以使用字体图标来完成
    2）如果遇到一些结构和样式复杂一些的小图片，还是使用精灵图来制作更加合适

    字体图标的下载，引入，追加

52.CSS三角的做法
    1)盒子的高度和宽度必须设置为零
    2）指定透明的实线边框
    3）根据需要的三角形把边框设置为需要的颜色

53.CSS用户界面样式
    所谓的界面样式，就是更改一些用户操作样式，以便更好提升用户体验
    1）更改用户的鼠标样式（cursor）
        default：小白箭头
        pointer：小手
        move：移动样式
        text：文本样式
        not-allowed：禁止样式
    2）设置表单轮廓(outline)
        input { outline:0;}   input {outline:none;}
    3）防止表单域拖拽(resize)
        textarea {resize:none;}

54.vertical-align属性应用
    vertical-align使用场景：经常用于设置图片或表单（行内块元素）和文字垂直对齐
    用于设置一个元素的垂直对齐方式，但是它只针对于行内元素或行内块元素有效
    语法：
    vertical-align：baseline | top | middle | bottom
    baseline：默认，元素放到父元素的基线上
    top：把元素的顶端和行中最高元素的顶端对齐
    middle：把此元素放在父元素的中部
    bottom：把元素的顶端和行中最低元素的顶端对齐

55.图片底部空白缝隙解决方案：
    产生原因：图片底部会有一个空白缝隙，因为行内块元素默认对齐方式是和文字的基线对齐
    解决方案：
        1）给图片添加vertical-align：middle|top|bottom等属性，即改变默认的基线对齐方式
        2）把图片转换为块级元素display：block；
        推荐使用方案1）

56.溢出的文字省略号显示
    1）单行文字溢出省略号显示
        /*1.如果文字显示不开，强制一行内显示*/
            white-space: nowrap;
        /*2.超出的部分隐藏*/
            overflow: hidden;
        /*3.文字用省略号代替溢出的部分*/
            text-overflow: ellipsis;
    2）多行文字溢出省略号显示
        多行文本溢出显示省略号，存在较大的兼容性问题，适合于webkit浏览器或移动端（因为移动端大多是webkit内核）
        /*1.溢出部分隐藏*/
            overflow：hidden；
        /*2.隐藏的溢出部分用省略号代替*/
            text-overflow：ellipsis；
        /*3.弹性伸缩盒子模型显示*/
            display：-webkit-box；
        /*4.限制在一个块元素内显示文本的行数*/
            -webkit-line-clamp：2；
        /*5.设置或检索伸缩盒对象的子元素的排列方式*/
            -webkit-box-orient：vertical；

57.常见布局技巧：
    1）margin负值的运用
        1.让每个盒子margin往左侧移动-1px刚好压住相邻盒子的边框
        2.鼠标经过某个盒子时，提高当前盒子的层级即可（如果没有定位，则加相对定位，如果有定位，则加z-index）
    2）文字围绕浮动元素
    3）行内块的巧妙运用
    4）CSS三角强化
        div {
            width: 0;
            height: 0;
            border-color: transparent red transparent transparent;
            border-style: solid;
            border-width: 22px 8px 0 0;
        }

58.CSS初始化
    不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对html文本呈现的差异，照顾浏览器的差异，需要对CSS进行初始化
    简单理解：CSS初始化是指重设浏览器的样式，也称为CSS reset
    每个网页都必须先进行CSS初始化

59.HTML5的新特性
    *HTML5 中的一些有趣的新特性：
    *用于绘画的 canvas 元素
    *用于媒介回放的 video 和 audio 元素
    *对本地离线存储的更好的支持
    *新的特殊内容元素，比如 article、footer、header、nav、section
    *新的表单控件，比如 calendar、date、time、email、url、search

    HTML5的新增特性主要是针对以前的不足，增加了一些新的标签，新的表单和新的表单属性等
    这些新特性都存在兼容性的问题，基本是IE9+以上版本的浏览器才能支持，如果不考虑兼容性问题，就可以大量使用这些新特性

    1）html5新增的语义化标签：
    以前布局经常使用很多div盒子，但是对于搜索引擎来说,这是没有语义的。
    html5新增的语义化标签：
    <header>：头部标签
    <nav>：导航标签
    <article>：内容标签
    <section>：定义文档某个区域
    <aside>：侧边栏标签
    <footer>：尾部标签
    **注意：
        1.这种语义化标准主要是针对搜索引擎的
        2.这些新标签页面中可以使用多次
        3.在IE9中，需要把这些元素转换为块级元素
        4.移动端更喜欢用这些标签

    2）HTML5新增的多媒体标签
    新增的多媒体标签主要包含两个：
    谷歌浏览器把音频和视频的自动播放禁止了；
    1.音频<audio>
        当前<audio>元素支持三种音频格式，MP3,Wav，Ogg
        <audio>常见属性：
        1）autoplay：autoplay；--音频就绪后马上播放
        2）controls：controls；--显示播放控件
        3）loop：loop；--音频结束后循环播放
        4）src：url；--音频url地址
    2.视频<video>
        当前<video>元素支持三种视频格式，MP4,WebM,Ogg，但是尽量使用MP4格式
        <video>常见属性
        1）autoplay：autoplay；--视频就绪自动播放（谷歌浏览器需要添加muted解决自动播放问题）
        2）controls：controls；--向用户显示播放控件；（即开始暂停按钮，静音全屏按钮，进度条等播放器控件）
        3）width：px--设置播放器宽度
        4）height：px--设置播放器高度
        5）loop：loop；--播放完是否继续播放该视频，循环播放；
        6）preload：auto（预先加载）|none（不应加载）；--规定是否预加载视频（有autoplay则忽略该属性）
        7）src：url；--视频url地址；
        8）poster：imgurl；--加载等待的画面图片；
        9）muted：muted；--静音播放；

    3）HTML5新增的input类型：
        1.  type="email"
        2.  type="url"
        3.  type="date"
        4.  type="time"
        5.  type="month"
        6.  type="week"
        7.  type="number"
        8.  type="tel"
        9.  type="search"
        10. type="color"

    4）HTML5新增的表单属性：
        1.required：required；--表单拥有该属性表示其内容不能为空，必填
        2.placeholder：提示文本；--表单的提示信息，存在默认值将不显示
        3.autofocus：autofocus；--自动聚焦属性，页面加载完成后自动聚焦到指定表单
        4.autocomplete：on | off；--当用户在字段开始键入时，浏览器基于之前键入的值，应该显示出在字段中填写的选项
                                    （即显示输入的历史）
                                    默认已经打开，如autocomplete：“on”；autocomplete=“off”
                                    需要放在表单内，同时加上name属性，同时成功提交
        5.multiple：multiple；--可以多选文件提交
    5）HTML5-embed标签

    6）HTML5-canvas画布
        canvas元素用于在网页上绘制图形
        HTML5的canvas元素使用js在网页上绘制图像，画布是一个矩形区域，可以控制每个像素

    7）HTML5-拖放（Drag和drop）
    8）HTML5内联SVG
        SVG 指可伸缩矢量图形 (Scalable Vector Graphics)
        SVG 用于定义用于网络的基于矢量的图形
        SVG 使用 XML 格式定义图形
        SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失
        SVG 是万维网联盟的标准

        与其他图像格式相比（比如 JPEG 和 GIF），使用 SVG 的优势在于：
        SVG 图像可通过文本编辑器来创建和修改
        SVG 图像可被搜索、索引、脚本化或压缩
        SVG 是可伸缩的
        SVG 图像可在任何的分辨率下被高质量地打印
        SVG 可在图像质量不下降的情况下被放大

60.CSS3的新特性：
    1）CSS3的现状：
        新增的CSS3特性有兼容性问题，IE9+才支持；
        移动端支持优于PC端；
        仍然在不断改进中；
        应用相对广泛
    2）CSS3新增选择器：
        CSS3新增了选择器，可以更加便捷，更加自由地选择目标元素
        1.属性选择器
        2.结构伪类选择器
        3.伪元素选择器

61.属性选择器：(根据属性选择元素)
    属性选择器可以根据元素特定属性来选择元素，这样就可以不借助于类或者ID选择器
    E[att]       ---->选择具有att属性的E标签
****E[att="val"] ---->选择具有att属性且att属性值等于val的E标签
    E[att^="val"]---->选择具有att属性且att属性值以val开头的E标签
    E[att$="val"]---->选择具有att属性且att属性值以val结尾的E标签
    E[att*="val"]---->选择具有att属性且att属性值包含val的E标签
    注意**：类选择器，属性选择器，伪类选择器权重都是10

62.结构伪类选择器
    结构伪类选择器主要是根据文档结构来选择元素，常用于选择父级元素里面的子元素
    常用结构伪类选择器：
    E:first-child    -->匹配父元素中的第一个子元素E
    E:last-child     -->匹配父元素中最后一个子元素E
    E:nth-child(n)   -->匹配父元素中第n个子元素E

    E:first-of-type  -->指定类型的第一个E元素
    E:last-of-type   -->指定类型的最后一个E元素
    E:nth-of-type(n) -->指定类型的第n个E元素

63.结构伪类选择器--nth-child(n)
    选择某个父元素的一个或多个特定的子元素
    1.n可以是数字，关键字和公式
    2.n如果是数字，就是选择第n个子元素，里面数字从1开始
    3.n如果是关键字，有两个值可选，even（偶数）、odd（奇数）
    4.n可以是公式；常见的公式如下（如果n是公式，则从0开始计算，但是第0个元素的个数会被忽略）
    公式：       取值：
    2n           偶数
    2n+1         奇数
    5n           5  10  15...
    n+5          从第五个开始
    -n+5         前五个

    注意：
    div:nth-of-type(n)和div:nth-child(n)的区别
    1）div：nth-child(n) 先后再前-->是先把所有子元素盒子排列顺序，然后选择第n个元素
            如果第n个元素不是div，那么就不会选任何元素
    2）div：nth-of-type(n) 先前再后-->先把所有div子元素排列顺序，再选择第n个div元素

小结：
    1）结构伪类选择器一般用于选择父级元素中的第几个孩子
    2）nth-child对父元素中所有孩子排序，先找到第n个子元素，再看与指定的元素是否匹配
    （先排序，再匹配）
    3）nth-of-type是对父元素里面指定的元素类型进行排序，然后再去找排序后的第n个子元素
    （先匹配，再排序）
    4）如果是无序列表，这两个就没有区别，更多用nth-child
    5）类选择器，伪类选择器，属性选择器，结构伪类选择器权重都是0，0，1，0

64.伪元素选择器
    伪元素选择器可以帮助我们利用CSS创建新标签元素，而不需要HTML标签，从而简化HTML结构
    ::before    在元素内部的前面插入内容
    ::after     在元素内部的后面插入内容
    例如：div::before{}
         div::after{}
         before和after都是div的子元素，相当于两个盒子，一个盒子放在前面，一个盒子放在后面
         即用CSS的方式创建子盒子

    注意；
    1)before和after创建一个元素，属于行内元素
    2）新创建的元素在html文档树中是找不到的，所以被称为伪元素
    3）语法： element::before{}
    4）before和after必须有content属性
    5）before在父元素内容的前面创建元素，after在父元素内容的后面创建元素
    6）伪元素选择器和标签选择器一样，权重都是1

伪元素清除浮动：
    1）父级添加after伪元素：
        .clearfix::after {
            content:'';
            display:block;
            height:0;
            clear:both;
            visibility:hidden;
        }
    2）父级添加双伪元素：
        .cleaefix:before,.clearfix:after {
            content:"";
            display:table;
        }
        .clearfix:after {
            clear:both;
        }

65.CSS3盒子模型：
    CSS3中可以通过box-sizing来指定盒模型，有两个值，
    即可指定为content-box、border-box，计算盒子大小的方式发生改变
    可以分为两种情况；
    1）box-sizing：content-box；盒子大小为width+padding+border（以前默认的）
    2）box-sizing：border-box；盒子大小就是width；
    如果盒子模型改为了box-sizing：border-box；那么padding和border就不会撑大盒子
    （前提是padding和border不会超过width）

66.CSS3滤镜属性（filter）
    filter属性将模糊或颜色偏移等图形效果应用于元素
    filter：函数()；
    例如：  filter:blur(5px)； blur模糊处理 数值越大越模糊

67.计算盒子宽度calc函数：
    calc()函数在声明CSS属性时执行计算
    例如：
    width:calc(100% - 80px);注意要有空格

68.CSS3过渡
    过渡（transition）是CSS3中具有颠覆性的特征之一，可以在不使用flash动画或JS的情况下，
当元素从一种样式变为另一种样式时为元素添加效果。
    过渡动画；是从一个状态渐渐过渡到另一个状态
    过渡可以让我们页面更好看，更动感，虽然低版本浏览器不支持，但是也不会影响网页布局，经常和:hover一起搭配使用

    语法规范：
    transition:要过渡的属性 花费时间 运动曲线 何时开始；
    *要过渡的属性：想要变化的CSS属性，宽度高度，背景颜色，内外边距都可以；
                  如果想要所有的属性都有过渡效果，用all即可实现
    *花费时间：单位是秒（必须写单位），如0.5s
    *运动曲线：默认是ease（可以省略）
    *何时开始：单位是秒（必须有单位），可以设置延迟触发时间，默认是0s（可以省略）

    过渡使用口诀：谁做过渡给谁加

69.CSS3 2D转换
    转换（transform）是CSS3中具有颠覆性的特征之一，可以实现元素的位移，旋转，缩放等效果
    移动：translate
    旋转：rotate
    缩放：scale

    1）2D转换之移动translate
        可以改变元素在页面中的位置，类似于定位
      语法：
        transform: translate(x,y);
        transform: translateX(n);
        transform: translateY(n);
      重点：
        1.定义2D转换中的移动，沿着x轴和y轴移动元素
        2.translate最大的优点是不会影响到其他元素的位置
        3.translate中的百分比单位是相对自身元素的
        4.对行内元素没有效果

    2）2D转换之旋转rotate
      语法：
        transform：rotate(度数);
      重点：
        1.rotate的单位是deg，比如rotate(45deg);
        2.角度为正是顺时针，角度为负是逆时针
        3.默认旋转的中心点是元素的中心点

      **设置转换中心点 transform-origin
            语法；transform:x y;
        1.注意后面的x y参数用空格隔开
        2.x y默认转换的中心点是元素的中心点（50%，50%）
        3.还可以给x，y设置像素或者方位名词（top，bottom，left，right，center）

    3)2D转换之缩放scale
        语法：
            transform：scale(X,Y);
        注意：
            *注意其中的两个参数用逗号隔开
            *transform: scale(1,1);宽和高都放大一倍，相当于没有放大
            *transform: scale(2,2);宽和高都放大两倍
            *transform：scale(2);只写一个参数，则第二个参数和第一个参数相同，相当于transform：scale(2,2);
            *transform: scale(0.5,0.5);缩小为原来的二分之一
            *scale缩放最大的优势：可以设置转换中心点来进行缩放，默认以元素中心点进行缩放，而且不影响其他的盒子

    2D转换综合写法：
        1.同时使用多个转换，格式为：transform:translate() rotate() scale();
        2.其顺序会影响转换的效果，比如先旋转后坐标轴会改变
        3.同时有位移和其他转换效果时，位移要放在最前面
